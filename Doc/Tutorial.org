#                            -*- mode: org; -*-
#
#+TITLE: *PatMat: SPITBOL-like pattern construction and matching in C++*
#+AUTHOR: nil
#+OPTIONS: author:nil email:nil ^:{}
#+LaTeX_HEADER: \usepackage[parfill]{parskip}
#+STARTUP: hidestars odd

* Pattern Matching Tutorial
  A pattern matching operation (a call to one of the Match subprograms) takes a
  subject string and a pattern, and optionally a replacement string. The
  replacement string option is only allowed if the subject is a variable.

  The pattern is matched against the subject string, and either the match fails,
  or it succeeds matching a contiguous sub-string. If a replacement string is
  specified, then the subject string is modified by replacing the matched
  sub-string with the given replacement.

*** Concatenation and Alternation
    A pattern consists of a series of pattern elements. The pattern is built up
    using either the concatenation operator:
    #+begin_src c++
      A & B
    #+end_src
    which means match =A= followed immediately by matching B, or the alternation
    operator:
    #+begin_src c++
      A | B
    #+end_src
    which means first attempt to match =A=, and then if that does not succeed,
    match =B=.

   There is full backtracking, which means that if a given pattern element fails
   to match, then previous alternatives are matched.  For example if we have the
   pattern:
   #+begin_src c++
     (A | B) & (C | D) & (E | F)
   #+end_src
   First we attempt to match =A=, if that succeeds, then we go on to try to
   match =C=, and if that succeeds, we go on to try to match =E=. If =E= fails,
   then we try =F=. If =F= fails, then we go back and try matching =D= instead
   of =C=. Let's make this explicit using a specific example, and introducing
   the simplest kind of pattern element, which is a literal string. The meaning
   of this pattern element is simply to match the characters that correspond to
   the string characters. Now let's rewrite the above pattern form with specific
   string literals as the pattern elements:
   #+begin_src c++
     ("ABC" | "AB") & ("DEF" | "CDE") & ("GH" | "IJ")
   #+end_src
   The following strings will be attempted in sequence:
   #+begin_src c++
      ABC . DEF . GH
      ABC . DEF . IJ
      ABC . CDE . GH
      ABC . CDE . IJ
      AB . DEF . GH
      AB . DEF . IJ
      AB . CDE . GH
      AB . CDE . IJ
   #+end_src
   Here we use the dot simply to separate the pieces of the string matched by
   the three separate elements.

*** Moving the Start Point
    A pattern is not required to match starting at the first character of the
    string, and is not required to match to the end of the string.  The first
    attempt does indeed attempt to match starting at the first character of the
    string, trying all the possible alternatives. But if all alternatives fail,
    then the starting point of the match is moved one character, and all
    possible alternatives are attempted at the new anchor point.

    The entire match fails only when every possible starting point has been
    attempted. As an example, suppose that we had the subject string
    #+begin_src c++
      "ABABCDEIJKL"
    #+end_src
    matched using the pattern in the previous example:
    #+begin_src c++
      ("ABC" | "AB") & ("DEF" | "CDE") & ("GH" | "IJ")
    #+end_src
    would succeed, afer two anchor point moves:
    #+begin_src c++
      "ABABCDEIJKL"
         ^^^^^^^
         matched
         section
    #+end_src
    This mode of pattern matching is called the unanchored mode. It is also
    possible to put the pattern matcher into anchored mode by setting the global
    variable Anchored_Mode to True. This will cause all subsequent matches to be
    performed in anchored mode, where the match is required to start at the
    first character.

    We will also see later how the effect of an anchored match can be obtained
    for a single specified anchor point if this is desired.

*** Other Pattern Elements
    In addition to strings (or single characters), there are many special
    pattern elements that correspond to special predefined alternations:
***** Arb
      Matches any string. First it matches the null string, and then on a
      subsequent failure, matches one character, and then two characters, and so
      on. It only fails if the entire remaining string is matched.
***** Bal
      Matches a non-empty string that is parentheses balanced with respect to
      ordinary =()= characters. Examples of balanced strings are ="ABC"=,
      ="A((B)C)"=, and ="A(B)C(D)E"=.  Bal matches the shortest possible
      balanced string on the first attempt, and if there is a subsequent
      failure, attempts to extend the string.
***** Abort
      Immediately aborts the entire pattern match, signalling failure. This is a
      specialized pattern element, which is useful in conjunction with some of
      the special pattern elements that have side effects.
***** Fail
      The null alternation. Matches no possible strings, so it always signals
      failure. This is a specialized pattern element, which is useful in
      conjunction with some of the special pattern elements that have side
      effects.
***** Fence
      Matches the null string at first, and then if a failure causes
      alternatives to be sought, aborts the match (like a Cancel). Note that
      using =Fence= at the start of a pattern has the same effect as matching in
      anchored mode.
***** Rem
      Matches from the current point to the last character in the string. This
      is a specialized pattern element, which is useful in conjunction with some
      of the special pattern elements that have side effects.
***** Succeed
      Repeatedly matches the null string (it is equivalent to the alternation
      #+begin_src c++
        ("" | "" | "" ....).
      #+end_src
      This is a special pattern element, which is useful
      in conjunction with some of the special pattern elements that have side
      effects.

*** Pattern Construction Functions
    The following functions construct additional pattern elements
***** Any(S)
      Where =S= is a string, matches a single character that is any one of the
      characters in =S=. Fails if the current character is not one of the given
      set of characters.
***** Arbno(P)
      Where =P= is any pattern, matches any number of instances of the pattern,
      starting with zero occurrences. It is thus equivalent to
      #+begin_src c++
        ("" | (P & ("" | (P & ("" ....)))).
      #+end_src
      The pattern =P= may contain any number of
      pattern elements including the use of alternatiion and concatenation.
***** Break(S)
      Where =S= is a string, matches a string of zero or more characters up to
      but not including a break character that is one of the characters given in
      the string =S=.  Can match the null string, but cannot match the last
      character in the string, since a break character is required to be
      present.
***** BreakX(S)
      Where =S= is a string, behaves exactly like =Break(S)= when it first
      matches, but if a string is successfully matched, then a susequent failure
      causes an attempt to extend the matched string.
***** Fence(P)
      Where =P= is a pattern, attempts to match the pattern =P= including trying
      all possible alternatives of =P=. If none of these alternatives succeeds,
      then the =Fence= pattern fails. If one alternative succeeds, then the
      pattern match proceeds, but on a subsequent failure, no attempt is made to
      search for alternative matches of =P=. The pattern =P= may contain any
      number of pattern elements including the use of alternatiion and
      concatenation.
***** Len(N)
      Where =N= is a natural number, matches the given number of characters. For
      example, =Len(10)= matches any string that is exactly ten characters long.
***** NotAny(S)
      Where =S= is a string, matches a single character that is not one of the
      characters of =S=. Fails if the current characer is one of the given set
      of characters.
***** NSpan(S)
      Where =S= is a string, matches a string of zero or more characters that is
      among the characters given in the string. Always matches the longest
      possible such string.  Always succeeds, since it can match the null
      string.
***** Pos(N)
      Where =N= is a natural number, matches the null string if exactly =N=
      characters have been matched so far, and otherwise fails.
***** Rpos(N)
      Where =N= is a natural number, matches the null string if exactly =N=
      characters remain to be matched, and otherwise fails.
***** Rtab(N)
      Where =N= is a natural number, matches characters from the current
      position until exactly =N= characters remain to be matched in the
      string. Fails if fewer than =N= unmatched characters remain in the string.
***** Tab(N)
      Where =N= is a natural number, matches characters from the current
      position until exactly =N= characters have been matched in all. Fails if
      more than =N= characters have already been matched.
***** Span(S)
      Where =S= is a string, matches a string of one or more characters that is
      among the characters given in the string. Always matches the longest
      possible such string.  Fails if the current character is not one of the
      given set of characters.

*** Recursive Pattern Matching
    The plus operator =(+P)= where =P= is a pattern variable, creates a
    recursive pattern that will, at pattern matching time, follow the pointer to
    obtain the referenced pattern, and then match this pattern. This may be used
    to construct recursive patterns. Consider for example:
    #+begin_src c++
      P = ("A" | ("B" & (+P)))
    #+end_src
    On the first attempt, this pattern attempts to match the string ="A"=.  If
    this fails, then the alternative matches a ="B"=, followed by an attempt to
    match =P= again. This second attempt first attempts to match ="A"=, and so
    on. The result is a pattern that will match a string of =B='s followed by a
    single =A=.

    This particular example could simply be written as =NSpan('B') & 'A'=, but
    the use of recursive patterns in the general case can construct complex
    patterns which could not otherwise be built.

*** Pattern Assignment Operations
    In addition to the overall result of a pattern match, which indicates
    success or failure, it is often useful to be able to keep track of the
    pieces of the subject string that are matched by individual pattern
    elements, or subsections of the pattern.

    The pattern assignment operators allow this capability. The first form is
    the immediate assignment:
    #+begin_src c++
      P % S
    #+end_src
    Here =P= is an arbitrary pattern, and =S= is a variable of type
    =string= that will be set to the sub-string matched by P. This
    assignment happens during pattern matching, so if =P= matches more than
    once, then the assignment happens more than once.

    The deferred assignment operation:
    #+begin_src c++
      P * S
    #+end_src
    avoids these multiple assignments by deferring the assignment to the end of
    the match. If the entire match is successful, and if the pattern =P= was
    part of the successful match, then at the end of the matching operation the
    assignment to =S= of the string matching =P= is performed.

    The cursor assignment operation:
    #+begin_src c++
      Setcur(N)
    #+end_src
    assigns the current cursor position to the natural variable =N=. The cursor
    position is defined as the count of characters that have been matched so far
    (including any start point moves).

    Finally the operations =*= and =%= may be used with values of type
    =ostream=. The effect is to do a =<<= operation of the matched
    sub-string. These are particularly useful in debugging pattern matches.

*** Deferred Matching
    The pattern construction functions (such as =Len= and =Any=) all permit the
    use of pointers to natural or string values, or functions that return
    natural or string values. These forms cause the actual value to be obtained
    at pattern matching time. This allows interesting possibilities for
    constructing dynamic patterns as illustrated in the examples section.

    In addition the =(+S)= operator may be used where =S= is a pointer to
    string or function returning string, with a similar deferred effect.

    A special use of deferred matching is the construction of predicate
    functions. The element =(+P)= where =P= is an access to a function that
    returns a =bool= value, causes the function to be called at the time the
    element is matched. If the function returns True, then the null string is
    matched, if the function returns False, then failure is signalled and
    previous alternatives are sought.

*** Deferred Replacement
    The simple model given for pattern replacement (where the matched sub-string
    is replaced by the string given as the third argument to Match) works fine
    in simple cases, but this approach does not work in the case where the
    expression used as the replacement string is dependent on values set by the
    match.

    For example, suppose we want to find an instance of a parenthesized
    character, and replace the parentheses with square brackets. At first glance
    it would seem that:
    #+begin_src c++
      Match(Subject, '(' & Len(1) * c & ')', '[' & c & ']');
    #+end_src
    would do the trick, but that does not work, because the third argument to
    Match gets evaluated too early, before the call to Match, and before the
    pattern match has had a chance to set =c=.

    To solve this problem we provide the deferred replacement capability.  With
    this approach, which of course is only needed if the pattern involved has
    side effects, is to do the match in two stages. The call to =Match= sets a
    pattern result in a variable of type =MatchRes=, and then a subsequent
    assignment operation uses this =MatchRes= object to perform the required
    replacement.

    Using this approach, we can now write the above operation properly in a
    manner that will work:
    #+begin_src c++
      MatchRes m;
      string c;
      ...
      Match(subject, '(' & Len(1) * c & ')', m);
      M = '[' + c + ']';
    #+end_src
    As with other =Match= cases, there is a function and procedure form of this
    match call. An assignment after a failed match has no effect. Note that
    =Subject= should not be modified between the calls.

*** Examples of Pattern Matching
    First a simple example of the use of pattern replacement to remove a line
    number from the start of a string. We assume that the line number has the
    form of a string of decimal digits followed by a period, followed by one or
    more spaces.
    #+begin_src c++
      const Pattern digs = Span("0123456789");
      const Pattern lNum = Pos(0U) & digs & '.' & Span(' ');
    #+end_src
    Now to use this pattern we simply do a match with a replacement:
    #+begin_src c++
      Match(line, lNum, "");
    #+end_src
    which replaces the line number by the null string. Note that it is also
    possible to use an =CharacterSet= value as an argument to =Span= and similar
    functions, and in particular all the useful constants 'in
    =CharacterSet::CharacterSets= are available. This means that we could define
    =Digs= as:
    #+begin_src c++
      const Pattern digs = Span(CharacterSets::digit);
    #+end_src
    The style we use here, of defining constant patterns and then using them is
    typical.  It is possible to build up patterns dynamically, but it is usually
    more efficient to build them in pieces in advance using constant
    declarations.  Note in particular that although it is possible to construct
    a pattern directly as an argument for the Match routine, it is much more
    efficient to preconstruct the pattern as we did in this example.

    Now let's look at the use of pattern assignment to break a string into
    sections. Suppose that the input string has two unsigned decimal integers,
    separated by spaces or a comma, with spaces allowed anywhere. Then we can
    isolate the two numbers with the following pattern:
    #+begin_src c++
      string num1, num2;
      const Pattern blank = NSpan(' ');
      const Pattern num = Span("0123456789");
      const Pattern nums = blank & num * num1 & Span(" ,") & num * num2;
      Match(" 124, 257 ", nums);
    #+end_src
    The match operation =Match(" 124, 257 ", nums)= would assign the string
    =124= to =num1= and the string =257= to =num2=.

    Now let's see how more complex elements can be built from the set of
    primitive elements. The following pattern matches strings that have the
    syntax of Ada 95 literals:
    #+begin_src c++
      const Pattern Digs  = Span(CharacterSets::digit);
      const Pattern UDigs = Digs & Arbno('_' & Digs);

      const Pattern Edig  = Span(CharacterSets::xdigit);
      const Pattern UEdig = Edig & Arbno('_' & Edig);

      const Pattern Bnum  = Udigs & '#' & UEdig & '#';
    #+end_src
    A match against =Bnum= will now match the desired strings, /e.g./ it will
    match =16#123_abc#=, but not =a#b#=. However, this pattern is not quite
    complete, since it does not allow colons to replace the pound signs. The
    following is more complete:
    #+begin_src c++
      const Pattern Bchar = Any("#:");
      const Pattern Bnum  = Udigs & Bchar & UEdig & Bchar;
    #+end_src
    but that is still not quite right, since it allows =#= and =:= to be mixed,
    and they are supposed to be used consistently.  We solve this by using a
    deferred match.
    #+begin_src c++
      string Temp;
      const Pattern Bnum = Udigs & Bchar * Temp & UEdig & (+Temp)
    #+end_src
    Here the first instance of the base character is stored in =Temp=, and
    then later in the pattern we rematch the value that was assigned.

    For an example of a recursive pattern, let's define a pattern that is like
    the built in =Bal=, but the string matched is balanced with respect to
    square brackets or curly brackets.

    The language for such strings might be defined in extended BNF as
    #+begin_src c++
      ELEMENT ::= <any character other than [] or {}>
                 | '[' BALANCED_STRING ']'
                 | '{' BALANCED_STRING '}'

      BALANCED_STRING ::= ELEMENT {ELEMENT}
    #+end_src
    Here we use ={}= to indicate zero or more occurrences of a term, as is
    common practice in extended BNF. Now we can translate the above BNF into
    recursive patterns as follows:
    #+begin_src c++
      Element, Balanced_String : aliased Pattern;
      .
      .
      .
      Element = NotAny ("[]{}")
                  |
                ('[' & (+Balanced_String) & ']')
                  |
                ('{' & (+Balanced_String) & '}');

      Balanced_String = Element & Arbno (Element);
    #+end_src
    Note the important use of =+= here to refer to a pattern not yet defined.
    Note also that we use assignments precisely because we cannot refer to as
    yet undeclared variables in initializations.

    Now that this pattern is constructed, we can use it as though it were a new
    primitive pattern element, and for example, the match:
    #+begin_src c++
      Match("xy[ab{cd}]", Balanced_String * Current_Output & Fail);
    #+end_src
    will generate the output:
    #+begin_src c++
      x
      xy
      xy[ab{cd}]
      y
      y[ab{cd}]
      [ab{cd}]
      a
      ab
      ab{cd}
      b
      b{cd}
      {cd}
      c
      cd
      d
    #+end_src
    Note that the function of the fail here is simply to force the pattern
    Balanced_String to match all possible alternatives. Studying the operation
    of this pattern in detail is highly instructive.

    Finally we give a rather elaborate example of the use of deferred matching.
    The following declarations build up a pattern which will find the longest
    string of decimal digits in the subject string.
    #+begin_src c++
      string Max, Cur;
      unsigned Loc;

      bool GtS()
      {
         return Length(Cur) > Length(Max);
      }

      const CharacterSet& Digit = CharacterSets::digit;
      const Pattern Digs = Span(Digit);

      const Pattern Find =
        "" * Max & Fence            & // initialize Max to null
        BreakX(Digit)               & // scan looking for digits
        ((Digs * Cur                & // assign next string to Cur
         (+GtS)                     & // check size(Cur) > Size(Max)
         Setcur(Loc))                 // if so, save location
                  * Max)            & // and assign to Max
        Fail;                         // seek all alternatives
    #+end_src
    As we see from the comments here, complex patterns like this take on aspects
    of sequential programs. In fact they are sequential programs with general
    backtracking. In this pattern, we first use a pattern assignment that
    matches null and assigns it to =Max=, so that it is initialized for the new
    match. Now =BreakX= scans to the next digit. =Arb= would do here, but
    =BreakX= will be more efficient.  Once we have found a digit, we scan out
    the longest string of digits with =Span=, and assign it to =Cur=. The
    deferred call to =GtS= tests if the string we assigned to =Cur= is the
    longest so far. If not, then failure is signalled, and we seek alternatives
    (this means that =BreakX= will extend and look for the next digit string).
    If the call to =GtS= succeeds then the matched string is assigned as the
    largest string so far into Max and its location is saved in =Loc=. Finally
    Fail forces the match to fail and seek alternatives, so that the entire
    string is searched.

    If the pattern =Find= is matched against a string, the variable =Max= at the
    end of the pattern will have the longest string of digits, and =Loc= will be
    the starting character location of the string. For example,
    =Match("ab123cd4657ef23", Find)= will assign ="4657"= to =Max= and =11= to
    =Loc= (indicating that the string ends with the eleventh character of the
    string).

*** Correspondence with Pattern Matching in SPITBOL
    Generally the C++ syntax and names correspond closely to SPITBOL syntax for
    pattern matching construction.

    The basic pattern construction operators are renamed as follows:
    #+begin_src c++
      SPITBOL     C++
      (space)      &
         |         | (Or for char)
         $         %
         .         *
         *         +
    #+end_src
    The C++ operators were chosen so that the relative precedences of these
    operators corresponds to that of the SPITBOL operators, but as always, the
    use of parentheses is advisable to clarify.

    The pattern construction operators all have similar names.

    The actual pattern matching syntax is modified in C++ as follows:
    #+begin_src c++
      SPITBOL      C++
      X Y          Match(X, Y);
      X Y = Z      Match(X, Y, Z);
    #+end_src
    and pattern failure is indicated by returning a =bool= result from the
    =Match= function (=true= for success, =false= for failure).
* Pattern Functions and Operators
#+INCLUDE: "../PatternOperations.H" src c++
